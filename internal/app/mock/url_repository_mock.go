// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apolsh/yapr-url-shortener/internal/app/repository (interfaces: URLRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/apolsh/yapr-url-shortener/internal/app/repository/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// GetAllByOwner mocks base method.
func (m *MockURLRepository) GetAllByOwner(arg0 string) ([]entity.ShortenedURLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByOwner", arg0)
	ret0, _ := ret[0].([]entity.ShortenedURLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByOwner indicates an expected call of GetAllByOwner.
func (mr *MockURLRepositoryMockRecorder) GetAllByOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByOwner", reflect.TypeOf((*MockURLRepository)(nil).GetAllByOwner), arg0)
}

// GetByID mocks base method.
func (m *MockURLRepository) GetByID(arg0 string) (entity.ShortenedURLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(entity.ShortenedURLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockURLRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockURLRepository)(nil).GetByID), arg0)
}

// Save mocks base method.
func (m *MockURLRepository) Save(arg0 entity.ShortenedURLInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockURLRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockURLRepository)(nil).Save), arg0)
}
