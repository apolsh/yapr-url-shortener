// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apolsh/yapr-url-shortener/internal/app/repository (interfaces: URLRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/apolsh/yapr-url-shortener/internal/app/repository/dto"
	entity "github.com/apolsh/yapr-url-shortener/internal/app/repository/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockURLRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockURLRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockURLRepository)(nil).Close))
}

// GetAllByOwner mocks base method.
func (m *MockURLRepository) GetAllByOwner(arg0 string) ([]*entity.ShortenedURLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByOwner", arg0)
	ret0, _ := ret[0].([]*entity.ShortenedURLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByOwner indicates an expected call of GetAllByOwner.
func (mr *MockURLRepositoryMockRecorder) GetAllByOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByOwner", reflect.TypeOf((*MockURLRepository)(nil).GetAllByOwner), arg0)
}

// GetByID mocks base method.
func (m *MockURLRepository) GetByID(arg0 string) (*entity.ShortenedURLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.ShortenedURLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockURLRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockURLRepository)(nil).GetByID), arg0)
}

// GetByOriginalURL mocks base method.
func (m *MockURLRepository) GetByOriginalURL(arg0 string) (*entity.ShortenedURLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", arg0)
	ret0, _ := ret[0].(*entity.ShortenedURLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockURLRepositoryMockRecorder) GetByOriginalURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockURLRepository)(nil).GetByOriginalURL), arg0)
}

// Ping mocks base method.
func (m *MockURLRepository) Ping() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLRepositoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLRepository)(nil).Ping))
}

// Save mocks base method.
func (m *MockURLRepository) Save(arg0 *entity.ShortenedURLInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockURLRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockURLRepository)(nil).Save), arg0)
}

// SaveBatch mocks base method.
func (m *MockURLRepository) SaveBatch(arg0 string, arg1 []*dto.ShortenInBatchRequestItem) ([]*dto.ShortenInBatchResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", arg0, arg1)
	ret0, _ := ret[0].([]*dto.ShortenInBatchResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockURLRepositoryMockRecorder) SaveBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockURLRepository)(nil).SaveBatch), arg0, arg1)
}
